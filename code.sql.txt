1.To look at first 100 rows of data: How many segments? 
SELECT *
FROM subscriptions
LIMIT 100;
2. Determine range of months of data provided, which months can you churn for? 
SELECT MIN(subscription_start), MAX(subscription_end)
FROM subscriptions;
3. Creating a temporary table for months:
WITH months AS
(SELECT 
'2017-01-01' AS first_day,
'2017-01-31' AS last_day
UNION
SELECT
'2017-02-01' AS first_day,
'2017-02-28' AS last_day
UNION
SELECT
'2017-03-01' AS first_day,
'2017_03_31' AS last_day)
SELECT *
FROM months;


4. Create a temporary table, Cross_join, from subscriptions and months:
WITH months AS
(SELECT 
'2017-01-01' AS first_day,
'2017-01-31' AS last_day
UNION
SELECT
'2017-02-01' AS first_day,
'2017-02-28' AS last_day
UNION
SELECT
'2017-03-01' AS first_day,
'2017_03_31' AS last_day),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months)
SELECT *
FROM cross_join
LIMIT 100;
5. Temp table with status:
WITH months AS
(SELECT 
        '2017-01-01' AS first_day,
  '2017-01-31' AS last_day
UNION
SELECT
        '2017-02-01' AS first_day,
  '2017-02-28' AS last_day
UNION
SELECT
        '2017-03-01' AS first_day,
  '2017-03-31' AS last_day),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months),
status AS
(SELECT id, first_day as month, 
CASE
  WHEN segment = 87
                 AND (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active_87,
 CASE
  WHEN segment = 30
                 AND (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active_30
FROM cross_join)
SELECT *
FROM status
LIMIT 100;




6: Adding is canceled:


WITH months AS
(SELECT 
        '2017-01-01' AS first_day,
  '2017-01-31' AS last_day
UNION
SELECT
        '2017-02-01' AS first_day,
  '2017-02-28' AS last_day
UNION
SELECT
        '2017-03-01' AS first_day,
  '2017-03-31' AS last_day),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months),
status AS
(SELECT id, first_day as month, 
CASE
  WHEN segment = 87
                 AND (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active_87,
 CASE
  WHEN segment = 30
                 AND (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active_30,
 CASE 
         WHEN segment = 30
 AND (subscription_end 
      BETWEEN first_day 
      AND last_day)
        THEN 1
                                 ELSE 0
                         END as is_canceled_30,
 CASE 
         WHEN segment = 87
 AND (subscription_end 
      BETWEEN first_day 
      AND last_day)
                                 THEN 1
                                 ELSE 0
                         END as is_canceled_87
FROM cross_join)
SELECT *
FROM status
LIMIT 100;
7. Status aggregate table:  
WITH months AS
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months),
status AS
(SELECT id, first_day as month,
CASE
  WHEN segment = '87'
         AND (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active_87,
CASE 
  WHEN segment = '87' 
 AND (subscription_end BETWEEN first_day AND last_day) THEN 1
  ELSE 0
END as is_canceled_87,
 CASE
  WHEN segment = '30'
         AND (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active_30,
 CASE 
  WHEN segment = '30'
 AND (subscription_end BETWEEN first_day AND last_day) THEN 1
  ELSE 0
END as is_canceled_30
FROM cross_join),
status_aggregate AS
(SELECT
  month,
  SUM(is_active_87) AS active_87_sum,
 SUM(is_canceled_87) AS canceled_87_sum,
 SUM(is_active_30) AS active_30_sum,
 SUM(is_canceled_30) AS canceled_30_sum
FROM status
GROUP BY month)
SELECT *
FROM status_aggregate;






8. Churn by month and segment
WITH months AS
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months),
status AS
(SELECT id, first_day as month,
CASE
  WHEN segment = '87'
         AND (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active_87,
CASE 
  WHEN segment = '87' 
 AND (subscription_end BETWEEN first_day AND last_day) THEN 1
  ELSE 0
END as is_canceled_87,
 CASE
  WHEN segment = '30'
         AND (subscription_start < first_day)
    AND (
      subscription_end > first_day
      OR subscription_end IS NULL
    ) THEN 1
  ELSE 0
END as is_active_30,
 CASE 
  WHEN segment = '30'
 AND (subscription_end BETWEEN first_day AND last_day) THEN 1
  ELSE 0
END as is_canceled_30
FROM cross_join),
status_aggregate AS
(SELECT
  month,
  SUM(is_active_87) AS active_87_sum,
 SUM(is_canceled_87) AS canceled_87_sum,
 SUM(is_active_30) AS active_30_sum,
 SUM(is_canceled_30) AS canceled_30_sum
FROM status
GROUP BY month)
SELECT month,
(1.0*(canceled_87_sum)/(active_87_sum)) AS churn_87,
  (1.0*(canceled_30_sum)/(active_30_sum)) AS churn_30
  FROM status_aggregate;